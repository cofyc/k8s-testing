diff --git a/pkg/scheduler/cache/BUILD b/pkg/scheduler/cache/BUILD
index 3b63cc0..98d474b 100644
--- a/pkg/scheduler/cache/BUILD
+++ b/pkg/scheduler/cache/BUILD
@@ -50,6 +50,7 @@ go_test(
         "//staging/src/k8s.io/apimachinery/pkg/types:go_default_library",
         "//staging/src/k8s.io/apimachinery/pkg/util/intstr:go_default_library",
         "//staging/src/k8s.io/apimachinery/pkg/util/sets:go_default_library",
+        "//staging/src/k8s.io/apimachinery/pkg/util/wait:go_default_library",
         "//staging/src/k8s.io/apiserver/pkg/util/feature:go_default_library",
     ],
 )
diff --git a/pkg/scheduler/cache/cache.go b/pkg/scheduler/cache/cache.go
index 0be6512..5fc3980 100644
--- a/pkg/scheduler/cache/cache.go
+++ b/pkg/scheduler/cache/cache.go
@@ -555,6 +555,13 @@ func (cache *schedulerCache) ListPDBs(selector labels.Selector) ([]*policy.PodDi
 	return pdbs, nil
 }
 
+func (cache *schedulerCache) IsUpToDate(n *NodeInfo) bool {
+	cache.mu.RLock()
+	defer cache.mu.RUnlock()
+	node, ok := cache.nodes[n.Node().Name]
+	return ok && n.generation == node.generation
+}
+
 func (cache *schedulerCache) run() {
 	go wait.Until(cache.cleanupExpiredAssumedPods, cache.period, cache.stop)
 }
diff --git a/pkg/scheduler/cache/cache_test.go b/pkg/scheduler/cache/cache_test.go
index 01837ca..45b79c0 100644
--- a/pkg/scheduler/cache/cache_test.go
+++ b/pkg/scheduler/cache/cache_test.go
@@ -30,6 +30,7 @@ import (
 	"k8s.io/apimachinery/pkg/labels"
 	"k8s.io/apimachinery/pkg/types"
 	"k8s.io/apimachinery/pkg/util/intstr"
+	"k8s.io/apimachinery/pkg/util/wait"
 	utilfeature "k8s.io/apiserver/pkg/util/feature"
 	"k8s.io/kubernetes/pkg/features"
 	priorityutil "k8s.io/kubernetes/pkg/scheduler/algorithm/priorities/util"
@@ -1335,3 +1336,26 @@ func TestPDBOperations(t *testing.T) {
 		}
 	}
 }
+
+func TestIsUpToDate(t *testing.T) {
+	cache := New(time.Duration(0), wait.NeverStop)
+	if err := cache.AddNode(&v1.Node{ObjectMeta: metav1.ObjectMeta{Name: "n1"}}); err != nil {
+		t.Errorf("Could not add node: %v", err)
+	}
+	s := cache.Snapshot()
+	node := s.Nodes["n1"]
+	if !cache.IsUpToDate(node) {
+		t.Errorf("Node incorrectly marked as stale")
+	}
+	pod := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "p1", UID: "p1"}, Spec: v1.PodSpec{NodeName: "n1"}}
+	if err := cache.AddPod(pod); err != nil {
+		t.Errorf("Could not add pod: %v", err)
+	}
+	if cache.IsUpToDate(node) {
+		t.Errorf("Node incorrectly marked as up to date")
+	}
+	badNode := &NodeInfo{node: &v1.Node{ObjectMeta: metav1.ObjectMeta{Name: "n2"}}}
+	if cache.IsUpToDate(badNode) {
+		t.Errorf("Nonexistant node incorrectly marked as up to date")
+	}
+}
diff --git a/pkg/scheduler/cache/interface.go b/pkg/scheduler/cache/interface.go
index 2f61d54..21eba90 100644
--- a/pkg/scheduler/cache/interface.go
+++ b/pkg/scheduler/cache/interface.go
@@ -123,6 +123,9 @@ type Cache interface {
 	// Snapshot takes a snapshot on current cache
 	Snapshot() *Snapshot
 
+	// IsUpToDate returns true if the given NodeInfo matches the current data in the cache.
+	IsUpToDate(n *NodeInfo) bool
+
 	// NodeTree returns a node tree structure
 	NodeTree() *NodeTree
 }
diff --git a/pkg/scheduler/core/equivalence/eqivalence.go b/pkg/scheduler/core/equivalence/eqivalence.go
index 287d6d9..4ee59a3 100644
--- a/pkg/scheduler/core/equivalence/eqivalence.go
+++ b/pkg/scheduler/core/equivalence/eqivalence.go
@@ -49,7 +49,6 @@ type Cache struct {
 	// the reality is lock contention in first level cache is rare.
 	mu          sync.RWMutex
 	nodeToCache nodeMap
-	generations map[string]uint32
 }
 
 // NewCache create an empty equiv class cache.
@@ -71,18 +70,12 @@ func NewCache() *Cache {
 type NodeCache struct {
 	mu    sync.RWMutex
 	cache predicateMap
-	// Generation for this node cache, incremented on node invalidation.
-	generation uint32
-	// Generations for predicates, incremented on predicate invalidation.
-	// Created on first update. Use 0 if does not exist.
-	predicateGenerations map[string]uint32
 }
 
 // newNodeCache returns an empty NodeCache.
 func newNodeCache() *NodeCache {
 	return &NodeCache{
-		cache:                make(predicateMap),
-		predicateGenerations: make(map[string]uint32),
+		cache: make(predicateMap),
 	}
 }
 
@@ -129,19 +122,7 @@ func (c *Cache) InvalidatePredicatesOnNode(nodeName string, predicateKeys sets.S
 func (c *Cache) InvalidateAllPredicatesOnNode(nodeName string) {
 	c.mu.Lock()
 	defer c.mu.Unlock()
-	n, ok := c.nodeToCache[nodeName]
-	if ok {
-		if len(n.cache) > 0 {
-			n.cache = make(predicateMap)
-		}
-		if len(n.predicateGenerations) > 0 {
-			n.predicateGenerations = make(map[string]uint32)
-		}
-	} else {
-		n = newNodeCache()
-		c.nodeToCache[nodeName] = n
-	}
-	n.generation++
+	delete(c.nodeToCache, nodeName)
 	glog.V(5).Infof("Cache invalidation: node=%s,predicates=*", nodeName)
 }
 
@@ -225,7 +206,7 @@ type predicateResult struct {
 // RunPredicate returns a cached predicate result. In case of a cache miss, the predicate will be
 // run and its results cached for the next call.
 //
-// NOTE: RunPredicate will not update the equivalence cache if generation does not match live version.
+// NOTE: RunPredicate will not update the equivalence cache if the given NodeInfo is stale.
 func (n *NodeCache) RunPredicate(
 	pred algorithm.FitPredicate,
 	predicateKey string,
@@ -240,7 +221,7 @@ func (n *NodeCache) RunPredicate(
 		return false, []algorithm.PredicateFailureReason{}, fmt.Errorf("nodeInfo is nil or node is invalid")
 	}
 
-	result, generation, ok := n.lookupResult(pod.GetName(), nodeInfo.Node().GetName(), predicateKey, equivClass.hash)
+	result, ok := n.lookupResult(pod.GetName(), nodeInfo.Node().GetName(), predicateKey, equivClass.hash)
 	if ok {
 		return result.Fit, result.FailReasons, nil
 	}
@@ -249,7 +230,7 @@ func (n *NodeCache) RunPredicate(
 		return fit, reasons, err
 	}
 	if cache != nil {
-		n.updateResult(pod.GetName(), predicateKey, fit, reasons, generation, equivClass.hash, cache, nodeInfo)
+		n.updateResult(pod.GetName(), predicateKey, fit, reasons, equivClass.hash, cache, nodeInfo)
 	}
 	return fit, reasons, nil
 }
@@ -259,7 +240,6 @@ func (n *NodeCache) updateResult(
 	podName, predicateKey string,
 	fit bool,
 	reasons []algorithm.PredicateFailureReason,
-	generation uint64,
 	equivalenceHash uint64,
 	cache schedulercache.Cache,
 	nodeInfo *schedulercache.NodeInfo,
@@ -269,6 +249,11 @@ func (n *NodeCache) updateResult(
 		metrics.EquivalenceCacheWrites.WithLabelValues("discarded_bad_node").Inc()
 		return
 	}
+	// Skip update if NodeInfo is stale.
+	if !cache.IsUpToDate(nodeInfo) {
+		metrics.EquivalenceCacheWrites.WithLabelValues("discarded_stale").Inc()
+		return
+	}
 
 	predicateItem := predicateResult{
 		Fit:         fit,
@@ -277,17 +262,6 @@ func (n *NodeCache) updateResult(
 
 	n.mu.Lock()
 	defer n.mu.Unlock()
-	livePredicateGeneration, ok := n.predicateGenerations[predicateKey]
-	if !ok {
-		livePredicateGeneration = 0
-	}
-	liveGeneration := uint64(n.generation)<<32 | uint64(livePredicateGeneration)
-	if generation != liveGeneration {
-		// Generation of this predicate has been updated since we last looked
-		// up, this indicates that we received a invalidation request during
-		// this time. Cache may be stale, skip update.
-		return
-	}
 	// If cached predicate map already exists, just update the predicate by key
 	if predicates, ok := n.cache[predicateKey]; ok {
 		// maps in golang are references, no need to add them back
@@ -303,12 +277,12 @@ func (n *NodeCache) updateResult(
 		nodeInfo.Node().Name, predicateKey, podName, predicateItem)
 }
 
-// lookupResult returns cached predicate results with a associated generation
-// and a bool saying whether a cache entry was found.
+// lookupResult returns cached predicate results and a bool saying whether a
+// cache entry was found.
 func (n *NodeCache) lookupResult(
 	podName, nodeName, predicateKey string,
 	equivalenceHash uint64,
-) (value predicateResult, generation uint64, ok bool) {
+) (value predicateResult, ok bool) {
 	n.mu.RLock()
 	defer n.mu.RUnlock()
 	value, ok = n.cache[predicateKey][equivalenceHash]
@@ -317,12 +291,7 @@ func (n *NodeCache) lookupResult(
 	} else {
 		metrics.EquivalenceCacheMisses.Inc()
 	}
-	predicateGeneration := uint32(0)
-	if val, ok := n.predicateGenerations[predicateKey]; ok {
-		predicateGeneration = val
-	}
-	generation = uint64(n.generation)<<32 | uint64(predicateGeneration)
-	return value, generation, ok
+	return value, ok
 }
 
 // invalidatePreds deletes cached predicates by given keys.
@@ -331,11 +300,6 @@ func (n *NodeCache) invalidatePreds(predicateKeys sets.String) {
 	defer n.mu.Unlock()
 	for predicateKey := range predicateKeys {
 		delete(n.cache, predicateKey)
-		if _, ok := n.predicateGenerations[predicateKey]; ok {
-			n.predicateGenerations[predicateKey]++
-		} else {
-			n.predicateGenerations[predicateKey] = 1
-		}
 	}
 }
 
diff --git a/pkg/scheduler/core/equivalence/eqivalence_test.go b/pkg/scheduler/core/equivalence/eqivalence_test.go
index 3feb99b..47e1d95 100644
--- a/pkg/scheduler/core/equivalence/eqivalence_test.go
+++ b/pkg/scheduler/core/equivalence/eqivalence_test.go
@@ -19,7 +19,6 @@ package equivalence
 import (
 	"errors"
 	"reflect"
-	"sync"
 	"testing"
 
 	"k8s.io/api/core/v1"
@@ -156,6 +155,16 @@ type predicateItemType struct {
 	reasons []algorithm.PredicateFailureReason
 }
 
+// upToDateCache is a fake Cache where IsUpToDate always returns true.
+type upToDateCache = schedulertesting.FakeCache
+
+// staleNodeCache is a fake Cache where IsUpToDate always returns false.
+type staleNodeCache struct {
+	schedulertesting.FakeCache
+}
+
+func (c *staleNodeCache) IsUpToDate(*schedulercache.NodeInfo) bool { return false }
+
 // mockPredicate provides an algorithm.FitPredicate with pre-set return values.
 type mockPredicate struct {
 	fit       bool
@@ -181,7 +190,7 @@ func TestRunPredicate(t *testing.T) {
 		{
 			name:             "pod fits/cache hit",
 			pred:             mockPredicate{},
-			cache:            &schedulertesting.FakeCache{},
+			cache:            &upToDateCache{},
 			expectFit:        true,
 			expectCacheHit:   true,
 			expectCacheWrite: false,
@@ -189,15 +198,23 @@ func TestRunPredicate(t *testing.T) {
 		{
 			name:             "pod fits/cache miss",
 			pred:             mockPredicate{fit: true},
-			cache:            &schedulertesting.FakeCache{},
+			cache:            &upToDateCache{},
 			expectFit:        true,
 			expectCacheHit:   false,
 			expectCacheWrite: true,
 		},
 		{
+			name:             "pod fits/cache miss/no write",
+			pred:             mockPredicate{fit: true},
+			cache:            &staleNodeCache{},
+			expectFit:        true,
+			expectCacheHit:   false,
+			expectCacheWrite: false,
+		},
+		{
 			name:             "pod doesn't fit/cache miss",
 			pred:             mockPredicate{reasons: []algorithm.PredicateFailureReason{predicates.ErrFakePredicate}},
-			cache:            &schedulertesting.FakeCache{},
+			cache:            &upToDateCache{},
 			expectFit:        false,
 			expectCacheHit:   false,
 			expectCacheWrite: true,
@@ -206,7 +223,7 @@ func TestRunPredicate(t *testing.T) {
 		{
 			name:             "pod doesn't fit/cache hit",
 			pred:             mockPredicate{},
-			cache:            &schedulertesting.FakeCache{},
+			cache:            &upToDateCache{},
 			expectFit:        false,
 			expectCacheHit:   true,
 			expectCacheWrite: false,
@@ -215,7 +232,7 @@ func TestRunPredicate(t *testing.T) {
 		{
 			name:             "predicate error",
 			pred:             mockPredicate{err: errors.New("This is expected")},
-			cache:            &schedulertesting.FakeCache{},
+			cache:            &upToDateCache{},
 			expectFit:        false,
 			expectCacheHit:   false,
 			expectCacheWrite: false,
@@ -237,7 +254,7 @@ func TestRunPredicate(t *testing.T) {
 
 			equivClass := NewClass(pod)
 			if test.expectCacheHit {
-				nodeCache.updateResult(pod.Name, "testPredicate", test.expectFit, test.expectedReasons, 0, equivClass.hash, test.cache, node)
+				nodeCache.updateResult(pod.Name, "testPredicate", test.expectFit, test.expectedReasons, equivClass.hash, test.cache, node)
 			}
 
 			fit, reasons, err := nodeCache.RunPredicate(test.pred.predicate, "testPredicate", pod, meta, node, equivClass, test.cache)
@@ -271,7 +288,7 @@ func TestRunPredicate(t *testing.T) {
 			if !test.expectCacheHit && test.pred.callCount == 0 {
 				t.Errorf("Predicate should be called")
 			}
-			_, _, ok := nodeCache.lookupResult(pod.Name, node.Node().Name, "testPredicate", equivClass.hash)
+			_, ok := nodeCache.lookupResult(pod.Name, node.Node().Name, "testPredicate", equivClass.hash)
 			if !ok && test.expectCacheWrite {
 				t.Errorf("Cache write should happen")
 			}
@@ -309,7 +326,7 @@ func TestUpdateResult(t *testing.T) {
 			expectCacheItem: predicateResult{
 				Fit: true,
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 		{
 			name:               "test 2",
@@ -322,7 +339,7 @@ func TestUpdateResult(t *testing.T) {
 			expectCacheItem: predicateResult{
 				Fit: false,
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 	}
 	for _, test := range tests {
@@ -350,7 +367,6 @@ func TestUpdateResult(t *testing.T) {
 				test.predicateKey,
 				test.fit,
 				test.reasons,
-				0,
 				test.equivalenceHash,
 				test.cache,
 				node,
@@ -407,7 +423,7 @@ func TestLookupResult(t *testing.T) {
 				fit:     false,
 				reasons: []algorithm.PredicateFailureReason{},
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 		{
 			name:     "test 2",
@@ -424,7 +440,7 @@ func TestLookupResult(t *testing.T) {
 				fit:     true,
 				reasons: []algorithm.PredicateFailureReason{},
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 		{
 			name:     "test 3",
@@ -442,7 +458,7 @@ func TestLookupResult(t *testing.T) {
 				fit:     false,
 				reasons: []algorithm.PredicateFailureReason{predicates.ErrPodNotFitsHostPorts},
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 		{
 			name:     "test 4",
@@ -461,7 +477,7 @@ func TestLookupResult(t *testing.T) {
 				fit:     false,
 				reasons: []algorithm.PredicateFailureReason{},
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 	}
 
@@ -481,7 +497,6 @@ func TestLookupResult(t *testing.T) {
 				test.predicateKey,
 				test.cachedItem.fit,
 				test.cachedItem.reasons,
-				0,
 				test.equivalenceHashForUpdatePredicate,
 				test.cache,
 				node,
@@ -493,7 +508,7 @@ func TestLookupResult(t *testing.T) {
 				ecache.InvalidatePredicatesOnNode(test.nodeName, predicateKeys)
 			}
 			// calculate predicate with equivalence cache
-			result, _, ok := nodeCache.lookupResult(test.podName,
+			result, ok := nodeCache.lookupResult(test.podName,
 				test.nodeName,
 				test.predicateKey,
 				test.equivalenceHashForCalPredicate,
@@ -642,88 +657,6 @@ func TestGetEquivalenceHash(t *testing.T) {
 	}
 }
 
-func TestInvalidateCachedPredicateInflight(t *testing.T) {
-	testPredicate := "GeneralPredicates"
-	podName := "testPod"
-	nodeName := "node1"
-	equivalenceHashForUpdatePredicate := uint64(123)
-	cachedItem := predicateItemType{
-		fit: false,
-		reasons: []algorithm.PredicateFailureReason{
-			predicates.ErrPodNotFitsHostPorts,
-		},
-	}
-	cache := &schedulertesting.FakeCache{}
-	node := schedulercache.NewNodeInfo()
-	testNode := &v1.Node{ObjectMeta: metav1.ObjectMeta{Name: nodeName}}
-	node.SetNode(testNode)
-	ecache := NewCache()
-	nodeCache, _ := ecache.GetNodeCache(testNode.Name)
-
-	// update cache
-	nodeCache.updateResult(
-		podName,
-		testPredicate,
-		cachedItem.fit,
-		cachedItem.reasons,
-		0,
-		equivalenceHashForUpdatePredicate,
-		cache,
-		node,
-	)
-	// cache should exist
-	_, generation, ok := nodeCache.lookupResult(podName, nodeName, testPredicate, equivalenceHashForUpdatePredicate)
-	if !ok {
-		t.Errorf("Failed: cached item for predicate key: %v on node: %v should exist",
-			testPredicate, nodeName)
-	}
-
-	var wg sync.WaitGroup
-
-	cachedInvalidatedCh := make(chan struct{})
-	beforeUpdatingCacheCh := make(chan struct{})
-
-	wg.Add(1)
-	go func() {
-		defer wg.Done()
-		result := predicateResult{
-			Fit:         cachedItem.fit,
-			FailReasons: cachedItem.reasons,
-		}
-		close(beforeUpdatingCacheCh)
-		// objects are updated and cache is invalidated
-		<-cachedInvalidatedCh
-		nodeCache.updateResult(
-			podName,
-			testPredicate,
-			result.Fit,
-			result.FailReasons,
-			generation,
-			equivalenceHashForUpdatePredicate,
-			cache,
-			node,
-		)
-	}()
-
-	wg.Add(1)
-	go func() {
-		defer wg.Done()
-		<-beforeUpdatingCacheCh
-		// objects are updated during predicate check was running
-		cachedItem.fit = true
-		// invalidate cache
-		ecache.InvalidatePredicates(sets.NewString(testPredicate))
-		close(cachedInvalidatedCh)
-	}()
-
-	wg.Wait()
-	_, _, ok = nodeCache.lookupResult(podName, nodeName, testPredicate, equivalenceHashForUpdatePredicate)
-	if ok {
-		t.Errorf("Failed: cached item for predicate key: %v on node: %v should be invalidated",
-			testPredicate, nodeName)
-	}
-}
-
 func TestInvalidateCachedPredicateItemOfAllNodes(t *testing.T) {
 	testPredicate := "GeneralPredicates"
 	// tests is used to initialize all nodes
@@ -746,7 +679,7 @@ func TestInvalidateCachedPredicateItemOfAllNodes(t *testing.T) {
 					predicates.ErrPodNotFitsHostPorts,
 				},
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 		{
 			name:     "hash predicate 456 not fits host ports",
@@ -759,7 +692,7 @@ func TestInvalidateCachedPredicateItemOfAllNodes(t *testing.T) {
 					predicates.ErrPodNotFitsHostPorts,
 				},
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 		{
 			name:     "hash predicate 123 fits",
@@ -769,7 +702,7 @@ func TestInvalidateCachedPredicateItemOfAllNodes(t *testing.T) {
 			cachedItem: predicateItemType{
 				fit: true,
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 	}
 	ecache := NewCache()
@@ -786,7 +719,6 @@ func TestInvalidateCachedPredicateItemOfAllNodes(t *testing.T) {
 			testPredicate,
 			test.cachedItem.fit,
 			test.cachedItem.reasons,
-			0,
 			test.equivalenceHashForUpdatePredicate,
 			test.cache,
 			node,
@@ -829,7 +761,7 @@ func TestInvalidateAllCachedPredicateItemOfNode(t *testing.T) {
 				fit:     false,
 				reasons: []algorithm.PredicateFailureReason{predicates.ErrPodNotFitsHostPorts},
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 		{
 			name:     "hash predicate 456 not fits host ports",
@@ -840,7 +772,7 @@ func TestInvalidateAllCachedPredicateItemOfNode(t *testing.T) {
 				fit:     false,
 				reasons: []algorithm.PredicateFailureReason{predicates.ErrPodNotFitsHostPorts},
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 		{
 			name:     "hash predicate 123 fits host ports",
@@ -850,7 +782,7 @@ func TestInvalidateAllCachedPredicateItemOfNode(t *testing.T) {
 			cachedItem: predicateItemType{
 				fit: true,
 			},
-			cache: &schedulertesting.FakeCache{},
+			cache: &upToDateCache{},
 		},
 	}
 	ecache := NewCache()
@@ -867,7 +799,6 @@ func TestInvalidateAllCachedPredicateItemOfNode(t *testing.T) {
 			testPredicate,
 			test.cachedItem.fit,
 			test.cachedItem.reasons,
-			0,
 			test.equivalenceHashForUpdatePredicate,
 			test.cache,
 			node,
@@ -877,12 +808,9 @@ func TestInvalidateAllCachedPredicateItemOfNode(t *testing.T) {
 	for _, test := range tests {
 		t.Run(test.name, func(t *testing.T) {
 			// invalidate cached predicate for all nodes
-			nodeCache, _ := ecache.GetNodeCache(test.nodeName)
-			oldGeneration := nodeCache.generation
 			ecache.InvalidateAllPredicatesOnNode(test.nodeName)
-			newNodeCache, _ := ecache.GetNodeCache(test.nodeName)
-			if newNodeCache.generation <= oldGeneration {
-				t.Errorf("Failed: cached item for node: %v generation should be incremented", test.nodeName)
+			if _, ok := ecache.GetNodeCache(test.nodeName); ok {
+				t.Errorf("Failed: cached item for node: %v should be invalidated", test.nodeName)
 			}
 		})
 	}
diff --git a/pkg/scheduler/core/generic_scheduler_test.go b/pkg/scheduler/core/generic_scheduler_test.go
index 69fb752..7e55396 100644
--- a/pkg/scheduler/core/generic_scheduler_test.go
+++ b/pkg/scheduler/core/generic_scheduler_test.go
@@ -1406,50 +1406,61 @@ func TestPreempt(t *testing.T) {
 	}
 }
 
+// syncingMockCache delegates method calls to an actual Cache,
+// but calls to UpdateNodeNameToInfoMap synchronize with the test.
+type syncingMockCache struct {
+	schedulercache.Cache
+	cycleStart, cacheInvalidated chan struct{}
+	once                         sync.Once
+}
+
+// UpdateNodeNameToInfoMap delegates to the real implementation, but on the first call, it
+// synchronizes with the test.
+//
+// Since UpdateNodeNameToInfoMap is one of the first steps of (*genericScheduler).Schedule, we use
+// this point to signal to the test that a scheduling cycle has started.
+func (c *syncingMockCache) UpdateNodeNameToInfoMap(infoMap map[string]*schedulercache.NodeInfo) error {
+	err := c.Cache.UpdateNodeNameToInfoMap(infoMap)
+	c.once.Do(func() {
+		c.cycleStart <- struct{}{}
+		<-c.cacheInvalidated
+	})
+	return err
+}
+
 // TestCacheInvalidationRace tests that equivalence cache invalidation is correctly
 // handled when an invalidation event happens early in a scheduling cycle. Specifically, the event
 // occurs after schedulercache is snapshotted and before equivalence cache lock is acquired.
 func TestCacheInvalidationRace(t *testing.T) {
 	// Create a predicate that returns false the first time and true on subsequent calls.
 	podWillFit := false
-	var (
-		callCount        int
-		cycleStart       = make(chan struct{})
-		cacheInvalidated = make(chan struct{})
-		once             sync.Once
-	)
+	var callCount int
 	testPredicate := func(pod *v1.Pod,
 		meta algorithm.PredicateMetadata,
 		nodeInfo *schedulercache.NodeInfo) (bool, []algorithm.PredicateFailureReason, error) {
 		callCount++
-		var (
-			fit            bool
-			failureReasons []algorithm.PredicateFailureReason
-		)
 		if !podWillFit {
 			podWillFit = true
-			fit = false
-			failureReasons = append(failureReasons, algorithmpredicates.ErrFakePredicate)
-		} else {
-			fit = true
+			return false, []algorithm.PredicateFailureReason{algorithmpredicates.ErrFakePredicate}, nil
 		}
-		once.Do(func() {
-			cycleStart <- struct{}{}
-			<-cacheInvalidated
-		})
-		return fit, failureReasons, nil
+		return true, nil, nil
 	}
 
 	// Set up the mock cache.
 	cache := schedulercache.New(time.Duration(0), wait.NeverStop)
 	testNode := &v1.Node{ObjectMeta: metav1.ObjectMeta{Name: "machine1"}}
 	cache.AddNode(testNode)
+	mockCache := &syncingMockCache{
+		Cache:            cache,
+		cycleStart:       make(chan struct{}),
+		cacheInvalidated: make(chan struct{}),
+	}
 
 	eCache := equivalence.NewCache()
 	// Ensure that equivalence cache invalidation happens after the scheduling cycle starts, but before
 	// the equivalence cache would be updated.
 	go func() {
-		<-cycleStart
+		<-mockCache.cycleStart
 		pod := &v1.Pod{
 			ObjectMeta: metav1.ObjectMeta{Name: "new-pod", UID: "new-pod"},
 			Spec:       v1.PodSpec{NodeName: "machine1"}}
@@ -1457,7 +1468,7 @@ func TestCacheInvalidationRace(t *testing.T) {
 			t.Errorf("Could not add pod to cache: %v", err)
 		}
 		eCache.InvalidateAllPredicatesOnNode("machine1")
-		cacheInvalidated <- struct{}{}
+		mockCache.cacheInvalidated <- struct{}{}
 	}()
 
 	// Set up the scheduler.
@@ -1466,7 +1477,7 @@ func TestCacheInvalidationRace(t *testing.T) {
 	prioritizers := []algorithm.PriorityConfig{{Map: EqualPriorityMap, Weight: 1}}
 	pvcLister := schedulertesting.FakePersistentVolumeClaimLister([]*v1.PersistentVolumeClaim{})
 	scheduler := NewGenericScheduler(
-		cache,
+		mockCache,
 		eCache,
 		NewSchedulingQueue(),
 		ps,
diff --git a/pkg/scheduler/factory/factory.go b/pkg/scheduler/factory/factory.go
index 4bb149f..a61ae26 100644
--- a/pkg/scheduler/factory/factory.go
+++ b/pkg/scheduler/factory/factory.go
@@ -720,6 +720,9 @@ func (c *configFactory) updatePodInCache(oldObj, newObj interface{}) {
 		return
 	}
 
+	// NOTE: Because the scheduler uses snapshots of schedulerCache and the live
+	// version of equivalencePodCache, updates must be written to schedulerCache
+	// before invalidating equivalencePodCache.
 	if err := c.schedulerCache.UpdatePod(oldPod, newPod); err != nil {
 		glog.Errorf("scheduler cache UpdatePod failed: %v", err)
 	}
@@ -806,6 +809,9 @@ func (c *configFactory) deletePodFromCache(obj interface{}) {
 		glog.Errorf("cannot convert to *v1.Pod: %v", t)
 		return
 	}
+	// NOTE: Because the scheduler uses snapshots of schedulerCache and the live
+	// version of equivalencePodCache, updates must be written to schedulerCache
+	// before invalidating equivalencePodCache.
 	if err := c.schedulerCache.RemovePod(pod); err != nil {
 		glog.Errorf("scheduler cache RemovePod failed: %v", err)
 	}
@@ -867,6 +873,9 @@ func (c *configFactory) updateNodeInCache(oldObj, newObj interface{}) {
 		return
 	}
 
+	// NOTE: Because the scheduler uses snapshots of schedulerCache and the live
+	// version of equivalencePodCache, updates must be written to schedulerCache
+	// before invalidating equivalencePodCache.
 	if err := c.schedulerCache.UpdateNode(oldNode, newNode); err != nil {
 		glog.Errorf("scheduler cache UpdateNode failed: %v", err)
 	}
@@ -960,6 +969,9 @@ func (c *configFactory) deleteNodeFromCache(obj interface{}) {
 		glog.Errorf("cannot convert to *v1.Node: %v", t)
 		return
 	}
+	// NOTE: Because the scheduler uses snapshots of schedulerCache and the live
+	// version of equivalencePodCache, updates must be written to schedulerCache
+	// before invalidating equivalencePodCache.
 	if err := c.schedulerCache.RemoveNode(node); err != nil {
 		glog.Errorf("scheduler cache RemoveNode failed: %v", err)
 	}
@@ -1389,6 +1401,9 @@ func (c *configFactory) MakeDefaultErrorFunc(backoff *util.PodBackoff, podQueue
 					_, err := c.client.CoreV1().Nodes().Get(nodeName, metav1.GetOptions{})
 					if err != nil && errors.IsNotFound(err) {
 						node := v1.Node{ObjectMeta: metav1.ObjectMeta{Name: nodeName}}
+						// NOTE: Because the scheduler uses snapshots of schedulerCache and the live
+						// version of equivalencePodCache, updates must be written to schedulerCache
+						// before invalidating equivalencePodCache.
 						c.schedulerCache.RemoveNode(&node)
 						// invalidate cached predicate for the node
 						if c.enableEquivalenceClassCache {
diff --git a/pkg/scheduler/scheduler.go b/pkg/scheduler/scheduler.go
index 1521967..e8ec9d1 100644
--- a/pkg/scheduler/scheduler.go
+++ b/pkg/scheduler/scheduler.go
@@ -372,6 +372,9 @@ func (sched *Scheduler) assume(assumed *v1.Pod, host string) error {
 	// If the binding fails, scheduler will release resources allocated to assumed pod
 	// immediately.
 	assumed.Spec.NodeName = host
+	// NOTE: Because the scheduler uses snapshots of SchedulerCache and the live
+	// version of Ecache, updates must be written to SchedulerCache before
+	// invalidating Ecache.
 	if err := sched.config.SchedulerCache.AssumePod(assumed); err != nil {
 		glog.Errorf("scheduler cache AssumePod failed: %v", err)
 
diff --git a/pkg/scheduler/testing/fake_cache.go b/pkg/scheduler/testing/fake_cache.go
index b9f2bdf..f03a491 100644
--- a/pkg/scheduler/testing/fake_cache.go
+++ b/pkg/scheduler/testing/fake_cache.go
@@ -106,5 +106,8 @@ func (f *FakeCache) Snapshot() *schedulercache.Snapshot {
 	return &schedulercache.Snapshot{}
 }
 
+// IsUpToDate is a fake method for testing
+func (f *FakeCache) IsUpToDate(*schedulercache.NodeInfo) bool { return true }
+
 // NodeTree is a fake method for testing.
 func (f *FakeCache) NodeTree() *schedulercache.NodeTree { return nil }
